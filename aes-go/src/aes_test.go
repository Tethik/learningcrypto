package main

import "testing"
import "encoding/hex"
import "strings"
import "bytes"
import "log"
import "os"
import "bufio"

var (
	inv_s = [256]byte {
	   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D }
)

func AssertThatByteArraysEqual(array1 []byte, array2 []byte, t* testing.T) {
	if len(array1) != len(array2) {
		t.Errorf("Different lengths: %v vs %v", len(array1), len(array2))
		return
	}
	
	for i := 0; i < len(array1); i++ {
		if array1[i] != array2[i] {
			t.Errorf("Index %v had differences: %v vs %v", i, array1[i], array2[i])	
			t.Errorf(hex.EncodeToString(array1))
			t.Errorf(hex.EncodeToString(array2))			
			return
		}
	}
}

func TestRotateLeft(t *testing.T) {
	input := []byte { 1, 2, 3, 4 }
	expected_output := []byte { 2, 3, 4, 1 }
	
	output := RotateLeft(input)
	
	if len(output) != len(expected_output) {
		t.Errorf("Wrong length after left rotation: %v should be %v", len(output), len(expected_output))			
		return
	}
	
	AssertThatByteArraysEqual(output, expected_output, t)	
}

func TestKeyExpansion(t *testing.T) {
	key, _ := hex.DecodeString("F4C020A0A1F604FD343FAC6A7E6AE0F9")
	key = KeyExpansion(key)
	if len(key) != 176 {
		t.Errorf("Wrong keylength after key expansion (128bit): %v", len(key))
	}
	
	// Test vectors copied from http://www.samiam.org/key-schedule.html
	keys := [][]byte {
		{ 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0 },
		{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
		{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
		{ 0x69, 0x20, 0xe2, 0x99, 0xa5, 0x20, 0x2a, 0x6d, 0x65, 0x6e, 0x63, 0x68, 0x69, 0x74, 0x6f, 0x2a } }
	
	expected_expanded_keys := [][]byte {
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 
			0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 
			0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99, 
			0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81, 0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b, 
			0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda, 0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90, 
			0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37, 0x6a, 0xb4, 0x9b, 0xa7, 
			0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b, 0xf0, 0x9b, 
			0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f, 
			0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41, 
			0xb4, 0xef, 0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e },
		{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
			0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 
			0xad, 0xae, 0xae, 0x19, 0xba, 0xb8, 0xb8, 0x0f, 0x52, 0x51, 0x51, 0xe6, 0x45, 0x47, 0x47, 0xf0, 
			0x09, 0x0e, 0x22, 0x77, 0xb3, 0xb6, 0x9a, 0x78, 0xe1, 0xe7, 0xcb, 0x9e, 0xa4, 0xa0, 0x8c, 0x6e, 
			0xe1, 0x6a, 0xbd, 0x3e, 0x52, 0xdc, 0x27, 0x46, 0xb3, 0x3b, 0xec, 0xd8, 0x17, 0x9b, 0x60, 0xb6, 
			0xe5, 0xba, 0xf3, 0xce, 0xb7, 0x66, 0xd4, 0x88, 0x04, 0x5d, 0x38, 0x50, 0x13, 0xc6, 0x58, 0xe6, 
			0x71, 0xd0, 0x7d, 0xb3, 0xc6, 0xb6, 0xa9, 0x3b, 0xc2, 0xeb, 0x91, 0x6b, 0xd1, 0x2d, 0xc9, 0x8d, 
			0xe9, 0x0d, 0x20, 0x8d, 0x2f, 0xbb, 0x89, 0xb6, 0xed, 0x50, 0x18, 0xdd, 0x3c, 0x7d, 0xd1, 0x50, 
			0x96, 0x33, 0x73, 0x66, 0xb9, 0x88, 0xfa, 0xd0, 0x54, 0xd8, 0xe2, 0x0d, 0x68, 0xa5, 0x33, 0x5d, 
			0x8b, 0xf0, 0x3f, 0x23, 0x32, 0x78, 0xc5, 0xf3, 0x66, 0xa0, 0x27, 0xfe, 0x0e, 0x05, 0x14, 0xa3, 
			0xd6, 0x0a, 0x35, 0x88, 0xe4, 0x72, 0xf0, 0x7b, 0x82, 0xd2, 0xd7, 0x85, 0x8c, 0xd7, 0xc3, 0x26 },
		{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
			0xd6, 0xaa, 0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe, 
			0xb6, 0x92, 0xcf, 0x0b, 0x64, 0x3d, 0xbd, 0xf1, 0xbe, 0x9b, 0xc5, 0x00, 0x68, 0x30, 0xb3, 0xfe, 
			0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2, 0xc9, 0xbf, 0x6c, 0x59, 0x0c, 0xbf, 0x04, 0x69, 0xbf, 0x41, 
			0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x03, 0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x05, 0x8d, 0xfd, 
			0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb, 0x50, 0xf3, 0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa, 
			0x5e, 0x39, 0x0f, 0x7d, 0xf7, 0xa6, 0x92, 0x96, 0xa7, 0x55, 0x3d, 0xc1, 0x0a, 0xa3, 0x1f, 0x6b, 
			0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c, 0x44, 0x0a, 0xdf, 0x4d, 0x4e, 0xa9, 0xc0, 0x26, 
			0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9, 0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2, 
			0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e, 
			0x13, 0x11, 0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 0xf3, 0x07, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5 },
		{ 0x69, 0x20, 0xe2, 0x99, 0xa5, 0x20, 0x2a, 0x6d, 0x65, 0x6e, 0x63, 0x68, 0x69, 0x74, 0x6f, 0x2a, 
			0xfa, 0x88, 0x07, 0x60, 0x5f, 0xa8, 0x2d, 0x0d, 0x3a, 0xc6, 0x4e, 0x65, 0x53, 0xb2, 0x21, 0x4f, 
			0xcf, 0x75, 0x83, 0x8d, 0x90, 0xdd, 0xae, 0x80, 0xaa, 0x1b, 0xe0, 0xe5, 0xf9, 0xa9, 0xc1, 0xaa, 
			0x18, 0x0d, 0x2f, 0x14, 0x88, 0xd0, 0x81, 0x94, 0x22, 0xcb, 0x61, 0x71, 0xdb, 0x62, 0xa0, 0xdb, 
			0xba, 0xed, 0x96, 0xad, 0x32, 0x3d, 0x17, 0x39, 0x10, 0xf6, 0x76, 0x48, 0xcb, 0x94, 0xd6, 0x93, 
			0x88, 0x1b, 0x4a, 0xb2, 0xba, 0x26, 0x5d, 0x8b, 0xaa, 0xd0, 0x2b, 0xc3, 0x61, 0x44, 0xfd, 0x50, 
			0xb3, 0x4f, 0x19, 0x5d, 0x09, 0x69, 0x44, 0xd6, 0xa3, 0xb9, 0x6f, 0x15, 0xc2, 0xfd, 0x92, 0x45, 
			0xa7, 0x00, 0x77, 0x78, 0xae, 0x69, 0x33, 0xae, 0x0d, 0xd0, 0x5c, 0xbb, 0xcf, 0x2d, 0xce, 0xfe, 
			0xff, 0x8b, 0xcc, 0xf2, 0x51, 0xe2, 0xff, 0x5c, 0x5c, 0x32, 0xa3, 0xe7, 0x93, 0x1f, 0x6d, 0x19, 
			0x24, 0xb7, 0x18, 0x2e, 0x75, 0x55, 0xe7, 0x72, 0x29, 0x67, 0x44, 0x95, 0xba, 0x78, 0x29, 0x8c, 
			0xae, 0x12, 0x7c, 0xda, 0xdb, 0x47, 0x9b, 0xa8, 0xf2, 0x20, 0xdf, 0x3d, 0x48, 0x58, 0xf6, 0xb1 } }
	
	for i := range keys {
		expanded_key := KeyExpansion(keys[i])
		AssertThatByteArraysEqual(expanded_key, expected_expanded_keys[i], t)
	}		
}

func TestAddRoundKey(t *testing.T) {
	key, _ := hex.DecodeString("F4C020A0A1F604FD343FAC6A7E6AE0F9")
	bytes, _ := hex.DecodeString("F295B9318B994434D93D98A4E449AFD8")
	block := ConvertToMatrix(bytes)
	block = AddRoundKey(block, key)
	expected := "065599912A6F40C9ED0234CE9A234F21"
	enc_block := strings.ToUpper(hex.EncodeToString(ConvertToArray(block)))
	if enc_block != expected {
		t.Errorf("Round key XOR wrong %v should be %v", enc_block, expected)
	}
}

func TestSubBytes(t *testing.T) {
	//~ key, _ := hex.DecodeString("F4C020A0A1F604FD343FAC6A7E6AE0F9")
	expected := "F295B9318B994434D93D98A4E449AFD8"
	bytes, _ := hex.DecodeString(expected)
	block := ConvertToMatrix(bytes)
	block = SubBytes(block)
	
	block_inverse := make([][]byte, 4)
	for i := range block {
		block_inverse[i] = make([]byte, 4)
		for j := range block {
			block_inverse[i][j] = inv_s[block[i][j]]
		}
	}	
	
	enc_block := strings.ToUpper(hex.EncodeToString(ConvertToArray(block_inverse)))
	
	if enc_block != expected {
		t.Errorf("Sub Bytes wrong %v should be %v", enc_block, expected)
	}
}

func TestShiftRows(t *testing.T) {
	testMatrix := [][]byte {
		{ 1, 2, 3, 4 },
		{ 1, 2, 3, 4, },
		{ 1, 2, 3, 4, },
		{ 1, 2, 3, 4 } }
	//~ sliceMatrix := testMatrix[0:16]
	expectedMatrix := [][]byte {
		{ 1, 2, 3, 4 },
		{ 2, 3, 4, 1 },
		{ 3, 4, 1, 2 },		
		{ 4, 1, 2, 3 } }
		
	testMatrix = ShiftRows(testMatrix)
	
	enc_test := hex.EncodeToString(ConvertToArray(testMatrix))
	enc_expected := hex.EncodeToString(ConvertToArray(expectedMatrix))
	
	if enc_test != enc_expected {
		t.Errorf("Shift Rows wrong %v should be %v", enc_test, enc_expected)
	}
}

func TestMixColumns(t *testing.T) {
	// Taken from nist document http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
	inputs := []string {
		"6353e08c0960e104cd70b751bacad0e7",
		"3bd92268fc74fb735767cbe0c0590e2d",
		"2d6d7ef03f33e334093602dd5bfb12c7" }
		
	outputs := []string {
		"5f72641557f5bc92f7be3b291db9f91a",
		"4c9c1e66f771f0762c3f868e534df256",
		"6385b79ffc538df997be478e7547d691"	}
	
	for i := range inputs {
		bytes, _ := hex.DecodeString(inputs[i])
		inputMatrix := ConvertToMatrix(bytes)
		result := MixColumns(inputMatrix)
		enc_result := hex.EncodeToString(ConvertToArray(result))
		if (enc_result  != outputs[i]) {
			t.Errorf("Mixcolumns wrong answer. Was %v should be %v", enc_result, outputs[i])
		}		
	}
	
}

func TestFullEncryptionOfBlock(t *testing.T) {
	inputs := []string {
		"00112233445566778899aabbccddeeff",
		"F295B9318B994434D93D98A4E449AFD8" }
		
	keys := []string {
		"000102030405060708090a0b0c0d0e0f",
		"F4C020A0A1F604FD343FAC6A7E6AE0F9" }
		
	outputs := []string {
		"69c4e0d86a7b0430d8cdb78070b4c55a",
		"52E418CBB1BE4949308B381691B109FE"	}

	
	for i := range inputs {
		key, _ := hex.DecodeString(keys[i])
		expanded_key := KeyExpansion(key)
		bytes, _ := hex.DecodeString(inputs[i])
		block := ConvertToMatrix(bytes)
		encrypted := EncryptBlock(expanded_key, block)
		enc_result := hex.EncodeToString(ConvertToArray(encrypted))
		if (strings.ToUpper(enc_result)  != strings.ToUpper(outputs[i])) {
			t.Errorf("Mixcolumns wrong answer. Was %v should be %v", enc_result, outputs[i])
		}		
	}	
}

func TestFullEncryption(t *testing.T) {
	inputs := []string {
		"00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",
		"F295B9318B994434D93D98A4E449AFD8F295B9318B994434D93D98A4E449AFD8",
		"00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff" }
		
	keys := []string {
		"000102030405060708090a0b0c0d0e0f",
		"F4C020A0A1F604FD343FAC6A7E6AE0F9",
		"000102030405060708090a0b0c0d0e0f" }
		
	outputs := []string {
		"69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a",
		"52E418CBB1BE4949308B381691B109FE52E418CBB1BE4949308B381691B109FE",
		"69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a" }

	
	for i := range inputs {
		key, _ := hex.DecodeString(keys[i])
		bytes, _ := hex.DecodeString(inputs[i])
		encrypted := Encrypt(key, bytes)
		enc_result := hex.EncodeToString(encrypted)
		if (strings.ToUpper(enc_result)  != strings.ToUpper(outputs[i])) {
			t.Errorf("Multiple block encryption wrong answer. Was %v should be %v", enc_result, outputs[i])
		}		
	}	
}

func TestBenchmarkFullEncryption(t *testing.T) {
	key, _ := hex.DecodeString("000102030405060708090a0b0c0d0e0f")
	var buffer bytes.Buffer
	for i := 0; i < 1000000 / 16; i++ {
		buffer.WriteString("000102030405060708090a0b0c0d0e0f")
	}
	bytes := make([]byte, buffer.Len())
	buffer.Read(bytes)
	log.SetOutput(new(NullWriter))
	debug = false
	//~ b.ResetTimer()
	Encrypt(key, bytes)
	b := bufio.NewWriter(os.Stdout)
	b.Write(bytes)
	b.Flush()
	
}

func BenchmarkFullEncryption(b *testing.B) {
	key, _ := hex.DecodeString("000102030405060708090a0b0c0d0e0f")
	var buffer bytes.Buffer
	for i := 0; i < 1000000 / 16; i++ {
		buffer.WriteString("000102030405060708090a0b0c0d0e0f")
	}
	bytes := make([]byte, buffer.Len())
	buffer.Read(bytes)
	log.SetOutput(new(NullWriter))
	debug = false
	b.ResetTimer()
	Encrypt(key, bytes)
}
